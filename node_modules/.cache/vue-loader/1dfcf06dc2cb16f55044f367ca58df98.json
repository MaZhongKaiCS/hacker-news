{"remainingRequest":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mazhongkai/Desktop/hacker-news/hacker-news/src/components/commentBox.vue?vue&type=template&id=1f230208&scoped=true&","dependencies":[{"path":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/src/components/commentBox.vue","mtime":1641913301259},{"path":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/cache-loader/dist/cjs.js","mtime":1641893649049},{"path":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1641893650742},{"path":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/cache-loader/dist/cjs.js","mtime":1641893649049},{"path":"/Users/mazhongkai/Desktop/hacker-news/hacker-news/node_modules/vue-loader/lib/index.js","mtime":1641893650400}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}